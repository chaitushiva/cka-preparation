import argparse
import re
import git
import sys
import logging

def setup_logging():
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)

    formatter = logging.Formatter('%(levelname)s: %(message)s')

    stream_handler = logging.StreamHandler()
    stream_handler.setLevel(logging.INFO)
    stream_handler.setFormatter(formatter)

    logger.addHandler(stream_handler)

    return logger

def is_valid_version(version):
    # Semantic versioning regex pattern
    pattern = r"^\d+\.\d+\.\d+$"
    return re.match(pattern, version)

def create_release_branch(repo_path, version, tag, logger, dry_run=False, push_to_remote=False):
    if not is_valid_version(version):
        logger.error("Invalid version format. Please use a valid semantic version (e.g., MAJOR.MINOR.PATCH).")
        sys.exit(1)

    try:
        repo = git.Repo(repo_path)

        # Fetch the specified tag
        repo.git.fetch("origin", tag)

        # Create release branch from the fetched tag
        release_branch = repo.create_head(f"release/{version}", ref=f"refs/tags/{tag}")

        if dry_run:
            logger.info("Dry run mode: Release branch creation simulation.")
            logger.info(f"Would create release branch 'release/{version}' from tag '{tag}'.")
        else:
            logger.info(f"Release branch 'release/{version}' created from tag '{tag}'.")

            if push_to_remote:
                logger.info("Pushing release branch to remote repository.")
                repo.git.push("origin", f"release/{version}")

    except git.GitError as e:
        logger.error(f"Error creating the release branch: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Create a release branch based on a specified tag.")
    parser.add_argument("version", help="Version for the release branch (e.g., 7.1.2)")
    parser.add_argument("tag", help="Tag to create the release branch from")
    parser.add_argument("repo", help="Path to the repository")
    parser.add_argument("--dry-run", action="store_true", help="Simulate the process without making changes")
    parser.add_argument("--push-to-remote", action="store_true", help="Push the release branch to the remote repository")

    args = parser.parse_args()

    logger = setup_logging()
    create_release_branch(args.repo, args.version, args.tag, logger, args.dry_run, args.push_to_remote)
